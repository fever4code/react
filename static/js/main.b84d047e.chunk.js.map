{"version":3,"sources":["Feedback/Feedback.js","Feedback/FeedbackOptions/FeedbackOptions.js","Feedback/Section.js","Feedback/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Feedback","good","neutral","bad","positivePercentage","total","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Section","title","children","Notification","message","App","state","feedbackIncrement","setState","prevState","countTotalFeedback","Object","values","reduce","acc","el","countPositiveFeedbackPercentage","Math","round","this","keys","console","log","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAwBeA,MArBf,YAAsE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,mBAAoBC,EAAS,EAATA,MAC1D,OACE,gCACE,2CACA,+BACE,6BACE,uCAAUJ,OAEZ,6BACE,0CAAaC,OAEf,6BACE,sCAASC,UAGb,uBACA,wCAAWE,KACX,oDAAuBD,EAAvB,WCFSE,MAhBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAHjC,SAKGA,GAJIA,SCGAG,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCFQC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KCYrCC,E,4MACJC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,kBAAoB,SAACV,GACnB,EAAKW,UAAS,SAACC,GACb,OAAO,eACJZ,EAASY,EAAUZ,GAAU,O,EAKpCa,mBAAqB,WAEnB,OADcC,OAAOC,OAAO,EAAKN,OACpBO,QAAO,SAACC,EAAKC,GACxB,OAAQD,EAAOC,IACd,I,EAELC,gCAAkC,WAChC,IAAMxB,EAAQ,EAAKkB,qBACnB,OAAOO,KAAKC,MAAO,EAAKZ,MAAMlB,KAAOI,EAAS,M,4CAGhD,WACE,MAA+B2B,KAAKb,MAA5BlB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBI,EAAUiB,OAAOS,KAAKD,KAAKb,OACjCe,QAAQC,IAAIH,KAAKT,sBACjB,IAAMlB,EAAQ2B,KAAKT,qBAEnB,OACE,eAAC,EAAD,CAAST,MAAM,wBAAf,UACE,cAAC,EAAD,CACEP,QAASA,EACTC,gBAAiBwB,KAAKZ,oBAEvBf,EAAQ,EACP,cAAC,EAAD,CACEJ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLE,MAAO2B,KAAKT,qBACZnB,mBAAoB4B,KAAKH,oCAG3B,cAAC,EAAD,CAAcZ,QAAQ,6B,GA/CdmB,aAkEHlB,ICpEAmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b84d047e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Feedback.css\";\r\n\r\nfunction Feedback({ good, neutral, bad, positivePercentage, total }) {\r\n  return (\r\n    <div>\r\n      <h2>Statistic</h2>\r\n      <ul>\r\n        <li>\r\n          <p>Good: {good}</p>\r\n        </li>\r\n        <li>\r\n          <p>Neutral: {neutral}</p>\r\n        </li>\r\n        <li>\r\n          <p>Bad: {bad}</p>\r\n        </li>\r\n      </ul>\r\n      <hr />\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n}\r\nexport default Feedback;\r\n","import React from \"react\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      {options.map((option) => (\r\n        <button\r\n          key={option}\r\n          type=\"button\"\r\n          onClick={() => onLeaveFeedback(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => <h2>{message}</h2>;\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\nimport Feedback from \"../src/Feedback/Feedback\";\nimport FeedbackOptions from \"./Feedback/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./Feedback/Section\";\nimport Notification from \"./Feedback/Notification\";\n// import Profile from \"./Profile/Profile\";\n// import Statistics from \"../src/Statistic/Statistic\";\n// import FriendList from \"../src/FriendList/FriendList\";\n// import TransactionHistory from \"./TransactionHistory/TransactionHistory\";\n// import user from \"./assets/user.json\";\n// import statisticalData from \"./assets/statistical-data.json\";\n// import friends from \"./assets/friends.json\";\n// import transactions from \"./assets/transactions.json\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  feedbackIncrement = (option) => {\n    this.setState((prevState) => {\n      return {\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const array = Object.values(this.state);\n    return array.reduce((acc, el) => {\n      return (acc += el);\n    }, 0);\n  };\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    return Math.round((this.state.good / total) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n    console.log(this.countTotalFeedback());\n    const total = this.countTotalFeedback();\n\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onLeaveFeedback={this.feedbackIncrement}\n        />\n        {total > 0 ? (\n          <Feedback\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n\n      /* <Profile\n          name={user.name}\n          tag={user.tag}\n          location={user.location}\n          avatar={user.avatar}\n          stats={user.stats}\n        />\n        <Statistics title=\"Upload stats\" stats={statisticalData} />\n        <Statistics stats={statisticalData} />\n        <FriendList friends={friends} />\n        <TransactionHistory items={transactions} /> */\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}